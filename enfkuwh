def muse():
    from brainflow.board_shim import BoardShim, BrainFlowInputParams, BoardIds
    from brainflow.data_filter import DataFilter, FilterTypes
    import numpy as np
    import matplotlib.pyplot as plt
    import time
    from brainflow.data_filter import WindowOperations
    from datetime import datetime

    params = BrainFlowInputParams()
    params.serial_port = 'COM6' #Change this depending on your device and OS
    board_id = 39 #Change this depending on your device
    Fatigue_Threshold = 0000
    Concentration_Threshold = 0000


    #Prepares the board for reading data
    try:
        board_id = 39
        board = BoardShim(board_id, params)
        board.prepare_session()
        print("Successfully prepared physical board.")
    except Exception as e:
        print(e)
        #If the device cannot be found or is being used elsewhere, creates a synthetic board instead
        print("Device could not be found or is being used by another program, creating synthetic board.")
        board_id = BoardIds.SYNTHETIC_BOARD
        board = BoardShim(board_id, params)
        board.prepare_session()

    start_time = datetime.now()
    fatigue_values = []
    concentration_values = []
    timeval = []
    dayval = []
    timeval.append(start_time.strftime("%H:%M:%S"))
    day = start_time.strftime("%A")
    

    print("Starting Stream")
    board.start_stream()
    eeg_channels = board.get_eeg_channels(board_id)
    sampling_rate = BoardShim.get_sampling_rate(board_id)
    for i in range(200):
        time.sleep(0.25)
        current_data = board.get_current_board_data(64)
        current_eeg_data = current_data[eeg_channels] 
        theta_total, alpha_total, beta_total = 0, 0, 0

        for channel_data in current_eeg_data:
            if len(channel_data) > 0:

                if (datetime.now() - start_time).seconds < 3600:
                    concentration_values.append(concentrationaddition)
                    fatigue_values.append(1.78984372803)
                    dayval.append(day)
                    concentrationaddition = 0
                    start_time = datetime.now()
                    timeval.append(start_time.strftime("%H:%M:%S"))

            # Apply filters to clean the signal
                DataFilter.perform_lowpass(channel_data, BoardShim.get_sampling_rate(board_id), 50.0, 5,
                                        FilterTypes.BUTTERWORTH, 1)
                DataFilter.perform_highpass(channel_data, BoardShim.get_sampling_rate(board_id), 2.0, 4,
                                            FilterTypes.BUTTERWORTH, 0)
            # Compute PSD
                psd = DataFilter.get_psd(channel_data, sampling_rate, WindowOperations.HANNING)

            # Extract band powers
                theta_power = DataFilter.get_band_power(psd, 4, 8)
                alpha_power = DataFilter.get_band_power(psd, 8, 13)
                beta_power = DataFilter.get_band_power(psd, 13, 32)

                theta_total += theta_power
                alpha_total += alpha_power
                beta_total += beta_power
        

        engagement = beta_total/alpha_total+theta_total
        concentration = theta_total / alpha_total 
        # #print(theta_total)
        # print(concentration)
        concentrationaddition += concentration
        fatigue = 00
        if concentration < Concentration_Threshold:
            #call function
            break
        if fatigue < Fatigue_Threshold:
            #call function
            break

    data = board.get_board_data()
    print(data.shape)
    print("Ending stream")
    board.stop_stream()
    board.release_session()





    #data base integration
    timeval.pop()
    dataDict = {"Day":day ,"StartTime":timeval, "Concentration": concentration_values, "Fatigue": fatigue_values}

    return dataDict

#eeg_channels = board.get_eeg_channels(board_id)
#eeg_data = data[eeg_channels]
#plt.plot(np.arange(eeg_data.shape[1]), eeg_data[0])


#print(eeg_data.shape)
#DataFilter.write_file(eeg_data, 'eeg_data_test.csv', 'w') #Writes into a csv file in the current directory

#restored_data = DataFilter.read_file('eeg_data_test.csv') #Reads file back
#print(restored_data.shape)




